/*
Copyright 2021 The Optum Authors
*/

// Code generated by injection-gen. DO NOT EDIT.

package fake

import (
	context "context"

	factoryfiltered "github.com/optum/kafka-topic-channel/pkg/client/injection/informers/factory/filtered"
	filtered "github.com/optum/kafka-topic-channel/pkg/client/injection/informers/messaging/v1alpha1/kafkatopicchannel/filtered"
	controller "knative.dev/pkg/controller"
	injection "knative.dev/pkg/injection"
	logging "knative.dev/pkg/logging"
)

var Get = filtered.Get

func init() {
	injection.Fake.RegisterFilteredInformers(withInformer)
}

func withInformer(ctx context.Context) (context.Context, []controller.Informer) {
	untyped := ctx.Value(factoryfiltered.LabelKey{})
	if untyped == nil {
		logging.FromContext(ctx).Panic(
			"Unable to fetch labelkey from context.")
	}
	labelSelectors := untyped.([]string)
	infs := []controller.Informer{}
	for _, selector := range labelSelectors {
		f := factoryfiltered.Get(ctx, selector)
		inf := f.Messaging().V1alpha1().KafkaTopicChannels()
		ctx = context.WithValue(ctx, filtered.Key{Selector: selector}, inf)
		infs = append(infs, inf.Informer())
	}
	return ctx, infs
}
